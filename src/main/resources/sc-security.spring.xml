<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 自定义会话管理，按需使用 -->
	<bean id="sessionManager"
		  class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置全局会话超时时间，默认30分钟(1800000) -->
		<property name="globalSessionTimeout" value="${sec.session.timeout}" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话验证器调度时间 -->
		<property name="sessionValidationInterval" value="${sec.session.validation.interval}" />
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- session存储，需要共享会话时使用相应分布式缓存实现，默认存储在本JVM内存中 -->
<!-- 		<property name="sessionDAO" ref="" /> -->
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="realm" />
		<property name="cacheManager" ref="shiroCacheManager" />
		<!-- 启用自定义会话管理，默认使用web容器管理会话 -->
<!-- 		<property name="sessionManager" ref="sessionManager" /> -->
	</bean>

	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" >
		<property name="cacheManager" ref="ehCacheCacheManager" />
	</bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/web/auth/login" />
		<property name="filterChainDefinitions">
			<value>
				/assets/**=anon
				/ws/**=anon
				/web/auth/captcha=anon
				/web/auth/login=anon
				/web/auth/login/authc=pass
				/web/auth/logout=logout
				/**=authc
			</value>
		</property>
	</bean>

	<bean id="authc" class="cn.powerdash.libsystem.common.security.authc.SessionTimeoutAuthenticationFilter">
		<property name="loginUrl" value="/web/auth/login" />
	</bean>
	<bean id="pass" class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter" >
		<property name="loginUrl" value="/web/auth/login/authc" />
	</bean>

	<!-- <bean id="realm" class="org.apache.shiro.realm.text.PropertiesRealm" /> -->
	<bean id="realm" class="cn.powerdash.libsystem.common.security.authc.ShiroJdbcRealm">
		<property name="dataSource" ref="dataSource" />
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<property name="permissionsLookupEnabled" value="true" />
		<property name="passwordService" ref="privateSaltPasswordService" />
		<property name="authenticationQuery"
			value="select password from user where username = ?" />
		<property name="userRolesQuery"
			value="select rolename from user_role where username = ?" />
		<property name="permissionsQuery"
			value="select permission from role_permission where rolename = ?" />
		<property name="loginFailureQuery"
			value="update user set login_failure_ct=login_failure_ct+1, last_login_failure_ts=current_timestamp where lower(username) = lower(?)" />
		<property name="resetLoginFailureQuery"
			value="update user set login_failure_ct=0 where lower(username) = lower(?)" />
		<property name="lastLoginFailureTsQuery"
			value="select to_char(last_login_failure_ts, 'yyyy-MM-dd HH24:mi:ss') from user where lower(usename) = lower(?)" />
		<property name="loginSuccessQuery"
			value="update user set login_failure_ct=0, last_login_ts=current_timestamp where lower(username) = lower(?)" />
		<property name="passwordPolicyQuery"
			value="select login_failure_ct,status from user where lower(username) = lower(?)" />
		<property name="passwordMigrateQuery"
			value="update user set password=? where lower(username) = lower(?)" />
	</bean>
	
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher" >
		<property name="passwordService" ref="privateSaltPasswordService" />
	</bean>
	
	<bean id="privateSaltPasswordService" class="cn.powerdash.libsystem.common.security.authc.PrivateSaltPasswordService" >
		<property name="hashIterations" value="${sec.hashIterations}" />
	</bean>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"
		depends-on="lifecycleBeanPostProcessor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
	<!-- captcha  -->
	<bean id="kaptchaSupport" class="cn.powerdash.libsystem.common.security.KaptchaSupport">
		<constructor-arg type="java.util.Properties">
			<props>
				<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
			</props>
		</constructor-arg>
	</bean>

</beans>